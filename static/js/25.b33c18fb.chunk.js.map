{"version":3,"file":"static/js/25.b33c18fb.chunk.js","mappings":"8SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,6BACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,EAAAA,EAAAA,IAAA,wCAA2CC,IAD7D,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,uFACkBN,EAAAA,EAAAA,IAAA,kCACMC,EADN,kBACuBK,IAFzC,cACCH,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACkBR,EAAAA,EAAAA,IAAA,mBAAsBQ,EAAtB,oBAAoCP,IADtD,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,uFACkBR,EAAAA,EAAAA,IAAA,mBAAsBQ,EAAtB,4BAA4CP,IAD9D,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,uFACkBR,EAAAA,EAAAA,IAAA,mBAAsBQ,EAAtB,4BAA4CP,IAD9D,cACCE,EADD,yBAEEA,EAASC,MAFX,kE,iGCxBMO,EAAOC,EAAAA,GAAAA,GAAH,uGAOJC,GAAYD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,0H,SCmBtB,EAzBkB,SAAC,GAAgB,IAAdG,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACN,EAAD,UACGI,EAAOG,KAAI,gBAAGV,EAAH,EAAGA,GAAIW,EAAP,EAAOA,MAAP,OACV,yBACE,SAACN,EAAD,CAAWO,GAAE,kBAAaZ,GAAMa,MAAO,CAAEC,KAAMN,GAA/C,SACGG,KAFIX,EADC,KASjB,C,qKChBYe,EAAOX,EAAAA,GAAAA,KAAH,gEAKJY,EAAUZ,EAAAA,GAAAA,MAAH,oOAcPa,EAASb,EAAAA,GAAAA,OAAH,iS,SClBNc,EAAQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAYtB,OACE,UAACJ,EAAD,CAAMI,SAZa,SAAAC,GACnBA,EAAMC,iBACN,IAAMvB,EAAQsB,EAAME,OAAOC,SAASzB,MAAM0B,MAC1C,IAAK1B,EACH,OAAO2B,MAAM,mDAGfN,EAASrB,GACTsB,EAAME,OAAOI,OACd,EAGC,WACE,SAACV,EAAD,CAASW,KAAK,QAAQC,KAAK,UAC3B,SAACX,EAAD,CAAQW,KAAK,SAAb,sBAGL,ECyBD,EAxC0B,WACxB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOzB,EAAP,KAAe0B,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMpC,EAAQgC,EAAaK,IAAI,SADjB,wCAKd,kHAE8BtC,EAAAA,EAAAA,IAAiBC,GAF/C,mBAG2B,KADfsC,EAFZ,EAEYA,SACIC,OAHhB,yCAIaZ,MAAM,4BAJnB,OAMUa,EAAeF,EAAQ1B,KAAI,SAAA6B,GAAM,MAAK,CAC1CvC,GAAIuC,EAAOvC,GACXW,MAAO4B,EAAO5B,MAFuB,IAIvCsB,EAAUK,GAVd,2EAYWb,MAAM,0BAZjB,2DALc,sBAGT3B,GAHS,mCAoBd0C,EACD,GAAE,CAACV,IAMJ,OACE,iCACE,SAACZ,EAAD,CAAOC,SANM,SAAArB,GACfiC,EAAgB,CAAEjC,MAAAA,GACnB,IAKsB,IAAlBS,EAAO8B,SAAgB,SAACI,EAAA,EAAD,CAAWlC,OAAQA,MAGhD,C","sources":["API.js","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/Input/Input.styled.jsx","components/Input/Input.jsx","pages/MoviesSearchList/MoviesSearchList.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '9b8f0c4ec164e6dabb7e1c13a0a2a1d6';\n\nexport async function fetchTrending() {\n  const response = await axios.get(`/3/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport async function fetchMovieByName(query) {\n  const response = await axios.get(\n    `/3/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data;\n}\n\nexport async function fetchMovieById(id) {\n  const response = await axios.get(`/3/movie/${id}?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport async function fetchMovieCast(id) {\n  const response = await axios.get(`/3/movie/${id}/credits?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport async function fetchMovieReviews(id) {\n  const response = await axios.get(`/3/movie/${id}/reviews?api_key=${API_KEY}`);\n  return response.data;\n}\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  margin-top: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const MovieLink = styled(Link)`\n  font-size: 16px;\n  padding-left: 10px;\n  color: black;\n  &:hover {\n    color: orange;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, MovieLink } from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </MovieLink>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MovieList;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  position: relative;\n  width: 400px;\n`;\n\nexport const InputEl = styled.input`\n  box-sizing: border-box;\n  width: 290px;\n  height: 30px;\n  padding: 5px;\n  border-radius: 5px;\n  font-size: 18px;\n  outline-color: gray;\n  &:focus,\n  &:active {\n    outline-color: orange;\n  }\n`;\n\nexport const Button = styled.button`\n  position: absolute;\n  right: 8px;\n  box-sizing: border-box;\n  width: 100px;\n  height: 30px;\n  background-color: transparent;\n  border-radius: 4px;\n  border: 2px solid orange;\n  &:focus,\n  &:hover {\n    background-color: orange;\n    color: white;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Button, Form, InputEl } from './Input.styled';\n\nexport const Input = ({ onSubmit }) => {\n  const handleSubmit = event => {\n    event.preventDefault();\n    const query = event.target.elements.query.value;\n    if (!query) {\n      return alert('Input can not be empty, please enter film title');\n    }\n\n    onSubmit(query);\n    event.target.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputEl name=\"query\" type=\"text\" />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n};\n\nInput.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovieByName } from '../../API';\nimport MovieList from '../../components/MovieList/MovieList';\nimport { Input } from 'components/Input/Input';\n\n const MoviesSearchList = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n\n    if (!query) return;\n\n    async function searchMovies() {\n      try {\n        const { results } = await fetchMovieByName(query);\n        if (results.length === 0) {\n          return alert('No movie with such name');\n        }\n        const moviesToSave = results.map(result => ({\n          id: result.id,\n          title: result.title,\n        }));\n        setMovies(moviesToSave);\n      } catch (error) {\n        return alert('Something went wrong!');\n      }\n    }\n    searchMovies();\n  }, [searchParams]);\n\n  const onSubmit = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <>\n      <Input onSubmit={onSubmit} />\n      {movies.length !== 0 && <MovieList movies={movies} />}\n    </>\n  );\n};\n\n\nexport default MoviesSearchList;"],"names":["axios","API_KEY","fetchTrending","response","data","fetchMovieByName","query","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","List","styled","MovieLink","Link","movies","location","useLocation","map","title","to","state","from","Form","InputEl","Button","Input","onSubmit","event","preventDefault","target","elements","value","alert","reset","name","type","useSearchParams","searchParams","setSearchParams","useState","setMovies","useEffect","get","results","length","moviesToSave","result","searchMovies","MovieList"],"sourceRoot":""}