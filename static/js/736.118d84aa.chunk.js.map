{"version":3,"file":"static/js/736.118d84aa.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,6BACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,EAAAA,EAAAA,IAAA,wCAA2CC,IAD7D,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,uFACkBN,EAAAA,EAAAA,IAAA,kCACMC,EADN,kBACuBK,IAFzC,cACCH,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACkBR,EAAAA,EAAAA,IAAA,mBAAsBQ,EAAtB,oBAAoCP,IADtD,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,uFACkBR,EAAAA,EAAAA,IAAA,mBAAsBQ,EAAtB,4BAA4CP,IAD9D,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,uFACkBR,EAAAA,EAAAA,IAAA,mBAAsBQ,EAAtB,4BAA4CP,IAD9D,cACCE,EADD,yBAEEA,EAASC,MAFX,kE,kKCzBMO,EAAQC,EAAAA,GAAAA,QAAH,qFAMLC,EAAOD,EAAAA,GAAAA,GAAH,4EAMJE,EAAWF,EAAAA,GAAAA,GAAH,gUAaRG,EAAYH,EAAAA,GAAAA,IAAH,0IAQTI,EAAOJ,EAAAA,GAAAA,GAAH,gD,SCiBjB,EA5Ca,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAAyBL,GAAzB,4FACyBR,EAAAA,EAAAA,IAAeQ,GADxC,gBACUM,EADV,EACUA,KACFC,EAAQD,EAAKE,KAAI,kBAA4C,CACjEjB,GADqB,EAAGA,GAExBkB,KAFqB,EAAOA,KAG5BC,IAHqB,EAAaC,aAIlCC,UAJqB,EAA2BA,UAA3B,IAMvBR,EAAUG,GARZ,2CADc,yBAAC,SAAD,2BAWdM,CAAUb,EACX,GAAE,CAACA,KAGF,SAACN,EAAD,UACqB,IAAlBS,EAAOW,QACN,SAAClB,EAAD,UACGO,EAAOK,KAAI,gBAAGjB,EAAH,EAAGA,GAAImB,EAAP,EAAOA,IAAKD,EAAZ,EAAYA,KAAMG,EAAlB,EAAkBA,UAAlB,OACV,UAACf,EAAD,YACE,gBACEa,IACEA,EAAG,0CAAsCA,GA5BzD,iKA8BcK,IAAKN,KAEP,UAACX,EAAD,YACE,SAACC,EAAD,UAAOU,KACP,uCAAeG,UATJrB,EADL,OAgBd,uFAIP,C","sources":["API.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '9b8f0c4ec164e6dabb7e1c13a0a2a1d6';\n\nexport async function fetchTrending() {\n  const response = await axios.get(`/3/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport async function fetchMovieByName(query) {\n  const response = await axios.get(\n    `/3/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data;\n}\n\nexport async function fetchMovieById(id) {\n  const response = await axios.get(`/3/movie/${id}?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport async function fetchMovieCast(id) {\n  const response = await axios.get(`/3/movie/${id}/credits?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport async function fetchMovieReviews(id) {\n  const response = await axios.get(`/3/movie/${id}/reviews?api_key=${API_KEY}`);\n  return response.data;\n}\n","import styled from 'styled-components';\n\nexport const Block = styled.section`\n  max-width: 1200px;\n  padding: 20px 0;\n  margin: 0 auto;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: calc((100% - 36px) / 4);\n  border-radius: 5px;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  & img {\n    /* flex-grow: 1; */\n  }\n`;\n\nexport const ActorInfo = styled.div`\n  /* flex-grow: 1; */\n  box-sizing: border-box;\n  height: 112px;\n  padding: 20px 12px;\n  text-align: center;\n`;\n\nexport const Name = styled.h3`\n  margin-bottom: 12px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'API';\nimport { List, ListItem, Block, ActorInfo, Name } from './Cast.styled';\n\nconst defaultImage =\n  'https://images.unsplash.com/photo-1594322436404-5a0526db4d13?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1129&q=80';\n\nconst Cast = () => {\n  const { movieID } = useParams();\n  const [actors, setActors] = useState([]);\n\n  useEffect(() => {\n    async function fetchCast(movieID) {\n      const { cast } = await fetchMovieCast(movieID);\n      const casts = cast.map(({ id, name, profile_path, character }) => ({\n        id,\n        name,\n        src: profile_path,\n        character,\n      }));\n      setActors(casts);\n    }\n    fetchCast(movieID);\n  }, [movieID]);\n\n  return (\n    <Block>\n      {actors.length !== 0 ? (\n        <List>\n          {actors.map(({ id, src, name, character }) => (\n            <ListItem key={id}>\n              <img\n                src={\n                  src ? `https://image.tmdb.org/t/p/w500/${src}` : defaultImage\n                }\n                alt={name}\n              />\n              <ActorInfo>\n                <Name>{name}</Name>\n                <p>Character: {character}</p>\n              </ActorInfo>\n            </ListItem>\n          ))}\n        </List>\n      ) : (\n        <p>We don't have any additional information about this movie.</p>\n      )}\n    </Block>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","API_KEY","fetchTrending","response","data","fetchMovieByName","query","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","Block","styled","List","ListItem","ActorInfo","Name","movieID","useParams","useState","actors","setActors","useEffect","cast","casts","map","name","src","profile_path","character","fetchCast","length","alt"],"sourceRoot":""}